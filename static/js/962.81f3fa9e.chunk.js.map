{"version":3,"file":"static/js/962.81f3fa9e.chunk.js","mappings":"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","sources":["components/RegistrationForm/Validation.js","components/RegistrationForm/RegistrationForm.jsx","pages/RegistrationPage/index.js","pages/RegistrationPage/RegistrationPage.jsx"],"sourcesContent":["import * as yup from 'yup';\r\nrequire('yup-phone');\r\nexport const schema = yup.object().shape({\r\n  email: yup.string().email().required('enter your E-mail, please'),\r\n  password: yup\r\n    .string()\r\n    .min(7, 'min Password 7 simvols')\r\n    .max(32, 'max Password 32 simvols')\r\n    .required('enter your Password, please'),\r\n  confirmPassword: yup\r\n    .string()\r\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\r\n    .required('confirm password, please'),\r\n  name: yup\r\n    .string()\r\n    .min(2, 'min name 2 simvols')\r\n    .max(16, 'max name 16 simvols')\r\n    .required('enter your Name, please'),\r\n  city: yup.string().required('chenge your city, please'),\r\n  phone: yup\r\n    .string()\r\n    .phone()\r\n    .typeError('not Valid phone')\r\n    .required('enter your phone, please'),\r\n});\r\n","import Select from 'react-select';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect, useState } from 'react';\r\nimport { registerUser } from 'redux/auth/authOperation';\r\nimport { selectError, selectToken } from 'redux/auth/authSelectors';\r\nimport { useWindowSize } from '@react-hook/window-size';\r\nimport Confetti from 'react-confetti';\r\nimport Data from '../../assets/City.json';\r\nimport InputMask from 'react-input-mask';\r\nimport { schema } from './Validation';\r\nimport { Validation } from 'utility/validationStyle';\r\nimport { selectStyles } from './selectStyles';\r\nimport {\r\n  Div,\r\n  Title,\r\n  Label,\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Span,\r\n  LinkRegistration,\r\n  ButtonBack,\r\n  ButtonRegister,\r\n  SelectContainer,\r\n} from './RegistrationForm.styled';\r\n\r\nconst RegistrationForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [formChange, SetFormChange] = useState(false);\r\n  const [emailErrorMessage, setEmailErrorMessage] = useState('');\r\n  const [emailError, setEmailError] = useState('');\r\n  const [emailErrorFixed, setEmailErrorFixed] = useState(false);\r\n\r\n  const { width, height } = useWindowSize();\r\n  const errorDB = useSelector(selectError);\r\n  const token = useSelector(selectToken);\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      name: '',\r\n      city: '',\r\n      phone: '',\r\n    },\r\n    validationSchema: schema,\r\n\r\n    onSubmit: values => {\r\n      const user = {\r\n        email: values.email,\r\n        password: values.password,\r\n        name: values.name,\r\n        city: values.city,\r\n        phone: values.phone,\r\n      };\r\n      dispatch(registerUser(user));\r\n    },\r\n  });\r\n\r\n  // const onChangeInputEmail = () => {\r\n\r\n  // }\r\n  const city = formik.values.city;\r\n  const setCity = city => {\r\n    formik.setValues(prev => ({\r\n      ...prev,\r\n      city: city,\r\n    }));\r\n  };\r\n  const onClickNext = e => {\r\n    e.preventDefault();\r\n\r\n    if (\r\n      !formik.values.email &&\r\n      !formik.values.password &&\r\n      !formik.values.confirmPassword\r\n    )\r\n      return;\r\n    if (\r\n      formik.errors.email ||\r\n      formik.errors.password ||\r\n      formik.errors.confirmPassword\r\n    )\r\n      return;\r\n\r\n    SetFormChange(true);\r\n  };\r\n  const SelectOptions = Data.map(i => ({\r\n    value: `${i.City},${i.District}`,\r\n    label: `${i.City}, ${i.District}`,\r\n  }));\r\n  useEffect(() => {\r\n    if (emailError !== formik.values.email) {\r\n      setEmailErrorMessage('');\r\n      setEmailErrorFixed(false);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [emailErrorFixed, formik.values.email]);\r\n\r\n  useEffect(() => {\r\n    if (errorDB === 'Email in use') {\r\n      setEmailErrorMessage('Email in use');\r\n      setEmailError(formik.values.email);\r\n      setEmailErrorFixed(true);\r\n      SetFormChange(false);\r\n    }\r\n    if (errorDB === '\"email\" must be a valid email') {\r\n      setEmailErrorMessage('Email must be a valid');\r\n      setEmailError(formik.values.email);\r\n      setEmailErrorFixed(true);\r\n      SetFormChange(false);\r\n    }\r\n\r\n    if (!errorDB) {\r\n      setEmailErrorMessage('');\r\n      setEmailError('');\r\n      setEmailErrorFixed(false);\r\n      SetFormChange(false);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [errorDB]);\r\n\r\n  //  console.log(emailErrorFixed);\r\n  //   console.log(emailError);\r\n  //   console.log(formik.values.email);\r\n  return (\r\n    <Div>\r\n      <Title>Registration</Title>\r\n      {!formChange || emailErrorFixed ? (\r\n        <Form>\r\n          <Label>\r\n            <Input\r\n              placeholder=\"E-mail\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              type=\"text\"\r\n              onBlur={formik.handleBlur}\r\n              onChange={e => formik.handleChange(e)}\r\n              value={formik.values.email}\r\n            ></Input>\r\n            {(formik.errors.email && formik.touched.email) || emailError ? (\r\n              <Validation>\r\n                {formik.errors.email || emailErrorMessage}\r\n              </Validation>\r\n            ) : null}\r\n          </Label>\r\n          <Label>\r\n            <Input\r\n              placeholder=\"Password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              onBlur={formik.handleBlur}\r\n              onChange={formik.handleChange}\r\n              value={formik.values.password}\r\n            ></Input>\r\n            {formik.errors.password && formik.touched.password ? (\r\n              <Validation>{formik.errors.password}</Validation>\r\n            ) : null}\r\n          </Label>\r\n          <Label>\r\n            <Input\r\n              placeholder=\"Confirm password\"\r\n              id=\"confirmPassword\"\r\n              name=\"confirmPassword\"\r\n              type=\"password\"\r\n              onBlur={formik.handleBlur}\r\n              onChange={formik.handleChange}\r\n              value={formik.values.confirmPassword}\r\n            ></Input>\r\n            {formik.errors.confirmPassword && formik.touched.confirmPassword ? (\r\n              <Validation>{formik.errors.confirmPassword}</Validation>\r\n            ) : null}\r\n          </Label>\r\n          <Button onClick={e => onClickNext(e)}>Next</Button>\r\n        </Form>\r\n      ) : (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n          <Label>\r\n            <Input\r\n              placeholder=\"Name\"\r\n              id=\"name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              onBlur={formik.handleBlur}\r\n              onChange={formik.handleChange}\r\n              value={formik.values.name}\r\n            ></Input>\r\n            {formik.errors.name && formik.touched.name ? (\r\n              <Validation>{formik.errors.name}</Validation>\r\n            ) : null}\r\n          </Label>\r\n          <Label>\r\n            <SelectContainer>\r\n              <Select\r\n                placeholder=\"City\"\r\n                defaultValue={city}\r\n                id=\"city\"\r\n                name=\"city\"\r\n                onBlur={formik.handleBlur}\r\n                styles={selectStyles()}\r\n                options={SelectOptions}\r\n                onChange={e => setCity(e.value)}\r\n                defaultInputValue={city}\r\n              ></Select>\r\n            </SelectContainer>\r\n\r\n            {formik.errors.city && formik.touched.city ? (\r\n              <Validation>{formik.errors.city}</Validation>\r\n            ) : null}\r\n          </Label>\r\n          <Label>\r\n            <InputMask\r\n              placeholder=\"Phone\"\r\n              name=\"phone\"\r\n              id=\"phone\"\r\n              mask=\"+38(099)999-99-99\"\r\n              style={{\r\n                background: 'none',\r\n                border: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                fontFamily: 'Manrope',\r\n                fontWeight: 400,\r\n                outline: 'none',\r\n                fontSize: 18,\r\n                lineHeight: 25,\r\n              }}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              value={formik.values.phone}\r\n            />\r\n            {formik.errors.phone && formik.touched.phone ? (\r\n              <Validation>{formik.errors.phone}</Validation>\r\n            ) : null}\r\n          </Label>\r\n          <ButtonRegister type=\"submit\">Registration</ButtonRegister>\r\n          <ButtonBack\r\n            onClick={e => {\r\n              e.preventDefault();\r\n              SetFormChange(false);\r\n            }}\r\n          >\r\n            Back\r\n          </ButtonBack>\r\n        </Form>\r\n      )}\r\n\r\n      <Span>\r\n        Don't have an account?{' '}\r\n        <LinkRegistration type=\"button\" to=\"/login\">\r\n          Login\r\n        </LinkRegistration>\r\n      </Span>\r\n      {token ? (\r\n        <Confetti recycle={false} width={width} height={height} />\r\n      ) : null}\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import { RegistrationPage } from './RegistrationPage';\r\nexport default RegistrationPage;\r\n","import RegistrationForm from 'components/RegistrationForm/RegistrationForm';\r\nimport { Div, GlobalStyleRegistration } from './RegistrationPage.styled';\r\n// import img from '../../assets/images/bg/bgSvg.svg';\r\nexport const RegistrationPage = () => {\r\n  return (\r\n    <Div>\r\n      <GlobalStyleRegistration />\r\n      <RegistrationForm />\r\n    </Div>\r\n  );\r\n};\r\n"],"names":["require","schema","yup","shape","email","required","password","min","max","confirmPassword","oneOf","name","city","phone","typeError","dispatch","useDispatch","useState","formChange","SetFormChange","emailErrorMessage","setEmailErrorMessage","emailError","setEmailError","emailErrorFixed","setEmailErrorFixed","useWindowSize","width","height","errorDB","useSelector","selectError","token","selectToken","formik","useFormik","initialValues","validationSchema","onSubmit","values","user","registerUser","SelectOptions","Data","i","value","City","District","label","useEffect","placeholder","id","type","onBlur","handleBlur","onChange","e","handleChange","errors","touched","onClick","preventDefault","onClickNext","handleSubmit","defaultValue","styles","selectStyles","options","setValues","prev","setCity","defaultInputValue","mask","style","background","border","fontFamily","fontWeight","outline","fontSize","lineHeight","to","recycle"],"sourceRoot":""}